{"version":3,"file":"static/js/513.b727d308.chunk.js","mappings":"8MACA,GAAgB,KAAO,4BAA4B,QAAU,+BAA+B,QAAU,gC,SC+FtG,MA1FA,SAAuBA,GACrB,OAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAgBD,EAAAA,EAAAA,UAChBE,GAAeF,EAAAA,EAAAA,UACfG,GAAmBH,EAAAA,EAAAA,UACnBI,GAAsBJ,EAAAA,EAAAA,UA6B5B,OACE,UAAC,EAAAK,SAAD,YACE,SAAC,KAAD,CACEC,KAAMT,EACNU,QAAS,iBACP,yEAGJ,SAACC,EAAA,EAAD,WACE,kBACEC,QAbmB,WACzBX,GAAc,IAaRY,UAAWC,EAAAA,KACXC,SAvCkB,SAACC,GACzBA,EAAMC,iBAEN,IAMMC,EAAc,CAClBC,MAPmBjB,EAAckB,QAAQC,MAQzCC,MAPmBlB,EAAcgB,QAAQC,MAQzCE,KAPkBlB,EAAae,QAAQC,MAQvCG,SAPsBlB,EAAiBc,QAAQC,MAQ/CI,YAPyBlB,EAAoBa,QAAQC,OAUvDvB,EAAM4B,aAAaR,IAmBf,UAKGpB,EAAM6B,YACL,gBAAKd,UAAWC,EAAAA,QAAhB,UACE,SAACc,EAAA,EAAD,OAGJ,iBAAKf,UAAWC,EAAAA,QAAhB,WACE,kBAAOe,QAAQ,QAAf,4BACA,kBAAOC,KAAK,OAAOC,UAAQ,EAACC,GAAG,QAAQC,IAAK/B,QAE9C,iBAAKW,UAAWC,EAAAA,QAAhB,WACE,kBAAOe,QAAQ,QAAf,4BACA,kBAAOC,KAAK,MAAMC,UAAQ,EAACC,GAAG,QAAQC,IAAK7B,QAE7C,iBAAKS,UAAWC,EAAAA,QAAhB,WACE,kBAAOe,QAAQ,OAAf,mBACA,kBAAOC,KAAK,OAAOC,UAAQ,EAACC,GAAG,OAAOC,IAAK5B,QAE7C,iBAAKQ,UAAWC,EAAAA,QAAhB,WACE,kBAAOe,QAAQ,WAAf,6BACA,kBAAOC,KAAK,OAAOC,UAAQ,EAACC,GAAG,WAAWC,IAAK3B,QAEjD,iBAAKO,UAAWC,EAAAA,QAAhB,WACE,kBAAOe,QAAQ,cAAf,0BACA,qBACEG,GAAG,cACHD,UAAQ,EACRG,KAAK,IACLD,IAAK1B,QAGT,gBAAKM,UAAWC,EAAAA,QAAhB,UACE,mBAAQD,UAAU,MAAMsB,QApDJ,WAC5BlC,GAAc,IAmDN,oC,kBC1DZ,MAtBA,WACE,OAAgCmC,EAAAA,EAAAA,GAAQC,EAAAA,GAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAUC,EAAAA,EAAAA,MAYhB,OAVAC,EAAAA,EAAAA,YAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,eAEd,CAACJ,EAAQC,KAOV,SAAC,EAAD,CACEb,UAAsB,YAAXY,EACXb,aAPsB,SAACR,GACzBoB,EAAYpB","sources":["webpack://my-portfolio/./src/components/projects/CreateProject.module.css?f60d","components/projects/CreateProject.js","pages/NewProject.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"CreateProject_form__6Lwxw\",\"control\":\"CreateProject_control__oDL31\",\"actions\":\"CreateProject_actions__XLC3n\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./CreateProject.module.css\";\n\nfunction CreateProject(props) {\n  const [isEntering, setIsEntering] = useState(false);\n  const titleInputRef = useRef();\n  const imageInputRef = useRef();\n  const linkInputRef = useRef();\n  const languageInputRef = useRef();\n  const descriptionInputRef = useRef();\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredTitle = titleInputRef.current.value;\n    const enteredImage = imageInputRef.current.value;\n    const enteredLink = linkInputRef.current.value;\n    const enteredLanguage = languageInputRef.current.value;\n    const enteredDescription = descriptionInputRef.current.value;\n\n    const projectData = {\n      title: enteredTitle,\n      image: enteredImage,\n      link: enteredLink,\n      language: enteredLanguage,\n      description: enteredDescription,\n    };\n\n    props.onAddProject(projectData);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure You want to leave, All your entered data will be lost\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n          <div className={classes.control}>\n            <label htmlFor=\"title\">Project Title</label>\n            <input type=\"text\" required id=\"title\" ref={titleInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"image\">Project Image</label>\n            <input type=\"url\" required id=\"image\" ref={imageInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"link\">Link</label>\n            <input type=\"text\" required id=\"link\" ref={linkInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"language\">Languages Used</label>\n            <input type=\"text\" required id=\"language\" ref={languageInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              required\n              rows=\"5\"\n              ref={descriptionInputRef}\n            ></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className=\"btn\" onClick={finishEnteringHandler}>\n              Add Project\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n}\n\nexport default CreateProject;\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport CreateProject from \"../components/projects/CreateProject\";\nimport useHttp from \"../hooks/use-http\";\nimport { addProject } from \"../lib/api\";\n\nfunction NewProject() {\n  const { sendRequest, status } = useHttp(addProject);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/projects\");\n    }\n  }, [status, history]);\n\n  const addProjectHandler = (projectData) => {\n    sendRequest(projectData);\n  };\n\n  return (\n    <CreateProject\n      isLoading={status === \"pending\"}\n      onAddProject={addProjectHandler}\n    />\n  );\n}\n\nexport default NewProject;\n"],"names":["props","useState","isEntering","setIsEntering","titleInputRef","useRef","imageInputRef","linkInputRef","languageInputRef","descriptionInputRef","Fragment","when","message","Card","onFocus","className","classes","onSubmit","event","preventDefault","projectData","title","current","value","image","link","language","description","onAddProject","isLoading","LoadingSpinner","htmlFor","type","required","id","ref","rows","onClick","useHttp","addProject","sendRequest","status","history","useHistory","useEffect","push"],"sourceRoot":""}